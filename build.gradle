buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url 'https://s01.oss.sonatype.org/content/repositories/releases'
		}
	}
}

// [ GRADLE PLUGINS ]
plugins {
	id 'application'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'groovy'
	id 'java'

	// added to add CLI
	id "com.cognifide.common" version "1.1.15"
}

description = "Java Demo Application for spring-boot-starter-beapi"

apply plugin: 'application'
apply plugin: 'groovy'

sourceSets {
	main {
		java { srcDirs = [] }    // no source dirs for the java compiler
		groovy { srcDirs = ["src/main/java", "src/main/groovy"] }  // compile   everything in src/ with groovy
	}
}

sourceCompatibility = "${sourceCompatibility}"
snapshotVersion = "${BEAPI_SNAPSHOT_VERSION}"

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
		//url 'https://s01.oss.sonatype.org/content/repositories/releases'
	}
}

apply plugin: "io.spring.dependency-management"

dependencies {
	if(snapshotVersion) {
		implementation "io.beapi:spring-boot-starter-beapi:${BEAPI_SNAPSHOT_VERSION}"
	}else{
		implementation 'io.beapi:spring-boot-starter-beapi:0.8.0-SNAPSHOT'
	}

	// [APPLICATION RUNNER]
	implementation "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
	implementation "org.springframework.data:spring-data-jpa:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot:${springBootVersion}"
	implementation("jakarta.persistence:jakarta.persistence-api:2.2.3")
	implementation("org.apache.tomcat.embed:tomcat-embed-core:9.0.56")
	implementation("org.slf4j:slf4j-api:1.7.32")
	implementation("org.springframework:spring-beans:5.3.14")
	implementation("org.springframework:spring-context:5.3.14")
	implementation("org.springframework:spring-web:5.3.14")


	// [LOGGING]
	runtimeOnly 'org.slf4j:slf4j-api:1.7.15'

	// [DATABASE/JPA]
	runtimeOnly 'mysql:mysql-connector-java'

	// [TEST]
	implementation 'com.zaxxer:HikariCP:3.2.0'
	implementation 'commons-io:commons-io:2.8.0'
	//implementation 'org.codehaus.groovy:groovy'
	implementation 'org.apache.groovy:groovy:4.0.8'
	implementation 'org.apache.groovy:groovy-json:4.0.8'
	testImplementation('org.spockframework:spock-core:2.3-groovy-4.0')
	testImplementation('org.spockframework:spock-spring:2.3-groovy-4.0')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
}

ext.javaMainClass = "demo.application.Application"


// -Pargs=configType=${configType}
application {
	mainClass = javaMainClass
	applicationDefaultJvmArgs = [project.property('configType.'+configTypeDefault)]
	if (project.hasProperty("args")) {
		List temp = project.args.split(',')
		temp.each(){
			List l = args.split('=')
			if(l[0]=='configType' && project.property('configType.'+l[1])) {
				applicationDefaultJvmArgs = [project.property('configType.'+l[1])]
			}
		}
	}
}

springBoot {
	buildInfo()
}

test {
	useJUnitPlatform()
}

configurations {
	commonWebResources
}

jar {
	manifest {
		attributes 'Main-Class': javaMainClass
	}
}



/*
* Start Block for CLI
*/
if (project.hasProperty("args")) {
	ext.cmdargs = project.getProperty("args")
} else {
	ext.cmdargs = ""
}


// --Pargs="domain=full.class.name"
// --Pargs="controller=package.name, domain=full.class.name"
task scaffold(type: JavaExec) {
	//test {
	//	exclude '**/*'
	//}
	group = "Execution"
	description = "Run the main class with JavaExecTask"
	classpath = sourceSets.main.runtimeClasspath
	main = javaMainClass
	args cmdargs
}
/*
* End Block for CLI
*/





